{"ast":null,"code":"import { CART_ADD_ITEM, CART_REMOVE_ITEM } from '../constants/cartConstant';\nexport const cartReducer = (state = {\n  cartItems: \"xd\"\n}, action) => {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload; // search in the state.cartItems array\n      // for the existence of the specific product\n      // that is defined by item (by the action.payload)\n      // if we find a match assign the result to the existItem vari\n\n      const existItem = state.cartItems.find(x => x.product === item.product); // if there is already a product matching the item in the state.cartItems array\n\n      if (existItem) {\n        // return the existing state with adjusted cardItems\n        return { ...state,\n          // map through the cardItems array\n          // and replace the matching product with the new item\n          // leave the rest products as they were\n          cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x)\n        }; // otherwise if the item is NOT already a product matching the item in the state.cartItems array\n      } else {\n        // return the existing state with adjusted cardItems\n        return { ...state,\n          // return a new cardItems array with the previous products spread and add the new item\n          cartItems: [...state.cartItems, item]\n        };\n      }\n\n    case CART_REMOVE_ITEM:\n      return {\n        loading: false,\n        product: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/ricar/Desktop/Projetos/MERN-E-Commerce-Web-Application/frontend/src/reducers/cartReducer.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","cartReducer","state","cartItems","action","type","item","payload","existItem","find","x","product","map","loading"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,gBAAxB,QAAgD,2BAAhD;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAT,EAA8BC,MAA9B,KAAyC;AAChE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,aAAL;AACI,YAAMO,IAAI,GAAGF,MAAM,CAACG,OAApB,CADJ,CAGI;AACA;AACA;AACA;;AACA,YAAMC,SAAS,GAAGN,KAAK,CAACC,SAAN,CAAgBM,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OAA/C,CAAlB,CAPJ,CASI;;AACA,UAAIH,SAAJ,EAAe;AACX;AACA,eAAO,EACH,GAAGN,KADA;AAEH;AACA;AACA;AACAC,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBS,GAAhB,CAAqBF,CAAD,IAC3BA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAkCL,IAAlC,GAAyCI,CADlC;AALR,SAAP,CAFW,CAWX;AACH,OAZD,MAYO;AACH;AACA,eAAO,EACH,GAAGR,KADA;AAEH;AACAC,UAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBG,IAArB;AAHR,SAAP;AAKH;;AACL,SAAKN,gBAAL;AACI,aAAO;AAAEa,QAAAA,OAAO,EAAE,KAAX;AAAkBF,QAAAA,OAAO,EAAEP,MAAM,CAACG;AAAlC,OAAP;;AACJ;AACI,aAAOL,KAAP;AAlCR;AAoCH,CArCM","sourcesContent":["import { CART_ADD_ITEM, CART_REMOVE_ITEM } from '../constants/cartConstant'\r\nexport const cartReducer = (state = { cartItems: \"xd\" }, action) => {\r\n    switch (action.type) {\r\n        case CART_ADD_ITEM:\r\n            const item = action.payload\r\n\r\n            // search in the state.cartItems array\r\n            // for the existence of the specific product\r\n            // that is defined by item (by the action.payload)\r\n            // if we find a match assign the result to the existItem vari\r\n            const existItem = state.cartItems.find((x) => x.product === item.product)\r\n\r\n            // if there is already a product matching the item in the state.cartItems array\r\n            if (existItem) {\r\n                // return the existing state with adjusted cardItems\r\n                return {\r\n                    ...state,\r\n                    // map through the cardItems array\r\n                    // and replace the matching product with the new item\r\n                    // leave the rest products as they were\r\n                    cartItems: state.cartItems.map((x) =>\r\n                        x.product === existItem.product ? item : x\r\n                    ),\r\n                };\r\n                // otherwise if the item is NOT already a product matching the item in the state.cartItems array\r\n            } else {\r\n                // return the existing state with adjusted cardItems\r\n                return {\r\n                    ...state,\r\n                    // return a new cardItems array with the previous products spread and add the new item\r\n                    cartItems: [...state.cartItems, item],\r\n                };\r\n            }\r\n        case CART_REMOVE_ITEM:\r\n            return { loading: false, product: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}