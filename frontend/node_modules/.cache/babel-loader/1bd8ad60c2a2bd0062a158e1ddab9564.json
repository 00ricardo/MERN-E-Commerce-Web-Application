{"ast":null,"code":"import { CART_ADD_ITEM, CART_REMOVE_ITEM } from '../constants/cartConstant';\nexport const cartReducer = (state = {\n  cartItems: []\n}, action) => {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload;\n      const existItem = state.cartItems.find(cartItem => cartItem.product === item.product); //for each cartItem in the Cart, check if the id of the product (cartItem.product) is equal to the current item product (item.product)\n\n      if (existItem) {\n        return { ...state,\n          cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x)\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems, item] //return the cart and the new item\n\n        };\n      }\n\n      return {\n        loading: true,\n        ...state\n      };\n    //spred operator (...state) -> it means that all \"elements\" from state its placed there\n\n    case CART_REMOVE_ITEM:\n      return {\n        loading: false,\n        product: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/ricar/Desktop/Projetos/MERN-E-Commerce-Web-Application/frontend/src/reducers/cartReducer.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","cartReducer","state","cartItems","action","type","item","payload","existItem","find","cartItem","product","map","x","loading"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,gBAAxB,QAAgD,2BAAhD;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAT,EAA4BC,MAA5B,KAAuC;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,aAAL;AACI,YAAMO,IAAI,GAAGF,MAAM,CAACG,OAApB;AACA,YAAMC,SAAS,GAAGN,KAAK,CAACC,SAAN,CAAgBM,IAAhB,CAAqBC,QAAQ,IAAIA,QAAQ,CAACC,OAAT,KAAqBL,IAAI,CAACK,OAA3D,CAAlB,CAFJ,CAE0F;;AAEtF,UAAIH,SAAJ,EAAe;AACX,eAAO,EACH,GAAGN,KADA;AAEHC,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBS,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACF,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAkCL,IAAlC,GAAyCO,CAAlE;AAFR,SAAP;AAIH,OALD,MAKO;AACH,eAAO,EACH,GAAGX,KADA;AAEHC,UAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBG,IAArB,CAFR,CAEqC;;AAFrC,SAAP;AAIH;;AACD,aAAO;AAAEQ,QAAAA,OAAO,EAAE,IAAX;AAAiB,WAAGZ;AAApB,OAAP;AAAmC;;AACvC,SAAKF,gBAAL;AACI,aAAO;AAAEc,QAAAA,OAAO,EAAE,KAAX;AAAkBH,QAAAA,OAAO,EAAEP,MAAM,CAACG;AAAlC,OAAP;;AACJ;AACI,aAAOL,KAAP;AApBR;AAsBH,CAvBM","sourcesContent":["import { CART_ADD_ITEM, CART_REMOVE_ITEM } from '../constants/cartConstant'\r\nexport const cartReducer = (state = { cartItems: [] }, action) => {\r\n    switch (action.type) {\r\n        case CART_ADD_ITEM:\r\n            const item = action.payload\r\n            const existItem = state.cartItems.find(cartItem => cartItem.product === item.product) //for each cartItem in the Cart, check if the id of the product (cartItem.product) is equal to the current item product (item.product)\r\n\r\n            if (existItem) {\r\n                return {\r\n                    ...state,\r\n                    cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x)\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    cartItems: [...state.cartItems, item]   //return the cart and the new item\r\n                }\r\n            }\r\n            return { loading: true, ...state } //spred operator (...state) -> it means that all \"elements\" from state its placed there\r\n        case CART_REMOVE_ITEM:\r\n            return { loading: false, product: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}